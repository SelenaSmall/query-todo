Get started with jQuery and learn how to add basic animations to your web applications. jQuery is a small, fast Javascript library which can be used for HTML document manipulation, event handling, animation, and Ajax requests. It's basically a shorthand version of Javascript which many purists are against but a majority of noobs are encouraged to learn first due to it's simplicity.

You can download jQuery or simply reference it in your application http://jquery.com/download/ - either way, the api documentation will come in handy to see what functions are available within the library and how they can be implemented http://api.jquery.com

This tutorial was written using Mac OS and Sublime Text 3 as the text editor. It assumes you have configured your local server to read project directories in either /Sites or another location on your machine and that you have a sound understanding on html and css concepts.

A repo for the full code of this example is available at https://github.com/SelenaSmall/query-todo
Author: Selena Small, 2016

------------------------------------------------------------------------------------------------------
1. Create a project root folder, the the purpose of this exercise I will name this folder “javascript”

2. Create 3 files in your project root: index.html		script.js		style.css
	*file structure pic

3. If you want to store your project on github or another git service (which is recommended to keep track of your projects), set that up now. You can follow the instructions below or go to https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
	In your git account, create a new remote repository for your project and use the command line to initialise your local repository before pushing it up.
		$ cd Sites/javascript/
		$ git init
		$ git status
		$ git add .
		$ git commit -m 'initial commit'
		$ git remote add origin (repository origin)
		$ git remote -v
		$ git push -u origin master

4. Inside the index.html set up your structure with links to the other files
	<!DOCTYPE html> 
	<html> 
		 <head> 
			 <title>Learning jQuery</title> 			 
			 <link rel='stylesheet' type='text/css' href='style.css'/> 
			 <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
			 <script type='text/javascript' src='script.js'></script> 
		 </head> 
		 <body> 
			 <h1>Learning jQuery</h1> 
		 </body> 
	</html>

5. You can test this out by opening a web browser and navigating to your localhost, in this case http://localhost/javascript/ - On the screen you should see the heading output that was specified in the index.html file “Learning jQuery"

6. In the style.css you can add styling to your elements as usual, lets change the styling on the <h2> tag and make it red
	h2 {
		color: red; 
	}

7. In the script.js you can now get your document ready to perform some jQuery tasks by declaring the document.ready function:
	$(document).ready(function() {

	});

8. Create a simply layout for the structure of your #todo list using html and css, here is a very simplified example with little styling. In the index.html between the <body></body> tags create a structure with clear targets
	<div class="task-list">
	  <h3>New Task</h3>
	  <form id="todo-form">
	    <input type="text" placeholder="Title" />
	    <textarea placeholder="Descrtipion"></textarea>
	    <input type="text" placeholder="Created (dd/mm/yyyy)" />
	    <input type="text" placeholder="Due (dd/mm/yyyy)" />
	    <button class="task-create">Create Task</button>
	  </form>

	</div>


	<div class="task-list" id="pending">
	  <h3>Active</h3>
	  <!-- Sample task added manually to check look -->
	  <div class="todo-task">
	    <div class="task-header">Sample Header</div>
	    <div class="task-date">25/06/1992</div>
	    <div class="task-description">Lorem Ipsum Dolor Sit Amet</div>
	    <button class="task-complete">Complete</button>
	    <button class="task-delete">Delete</button>
	  </div>
	</div>

	<div class="task-list" id="completed">
	  <h3>Complete</h3>
	</div>

9. And in the style.css at the very least set some styling to make your structure easy to see:
	.task-list {
		padding: 10px;
	  	width: 25%;
	  	margin: 10px;
	  	background-color: lightgrey;
	  	min-height: 240px;
	}

	.task-list input, .task-list textarea {
  		width: 100%;
	}

	.task-list input {
  		height: 30px;
	}

	.todo-task {
		background-color: #fff;
		width: 100%;
	}

	.task-list input[type="button"] {
  		width: 100px;
	}

10. Now we're ready to start with some jQuery magic. In a #todo list, there are essentially 3 simply tasks that need to occur which are Create, Complete and Delete. We'll begin with the delete task, since we have a hard coded sample task and this will be the easiest task to complete. In the script.js we can add ot the document ready a simple delete task which will remove the sample task from view - Becasue that task is hard coded, it will re-appear when the page is reloaded but we will at least have the basis of this functionality.
    // Delete task
    $('button.task-delete').click(function() {
        $(this).parent().fadeOut('fast');
    });

11. Next, the 'Complete' button needs to move the entire #todo item to the Complete section and the 'Complete' button needs ot disappear as this action will no longer work. First we can start with baby steps and when the tasks is complete, both the task and it's 'complete' button will change colour with the following jQuery & css
   	// Complete task
    $('button.task-complete').click(function() {
        $(this).parent().addClass('complete');
        $(this).addClass('complete');
    });

    .complete {
		background-color: red; 
	}

12.	Now that we have clearly identified which elements will be moved and that it works, we can simply create a variable and add the following lines to the complete function to ensure the div moves the 'Complete' section:
	var complete = $(this).parent();
    $(this).parent().parent().next().append(complete);

13.	And lastly, once the tasks is appropriately moved the 'Completed' section, we can modify the complete button with the following code:
	$(this).html("uncomplete");


14.	We now need to create a new function that will handle the click from the new "uncomplete" button.
	// Uncomplete task
	$('button.task-uncomplete').click(function() {
	var active = $(this).parent();

	  $(this).parent().parent().prev().append(active);
	  $(this).parent().removeClass('complete');
	  $(this).removeClass('task-uncomplete');
	  $(this).addClass('task-complete');
	  $(this).html("complete");        
	});

15. Now we can work the 'Create' new tasks function. First to ensure task will be created in the corretc place, we need to work out the order of elements as jQuery will ready. Add the following code to your script.js inside the document.ready block. This will append the new task to your 'Active' section:
    // Create new task
    $('button.task-create').click(function() {
        $('div.task-list#active').append('<div class="todo-task"></div>');
        return false;
    });

16.	We need to declare variables for the items we want to display in the new #todo and ensure they are created in the appropriate place when the 'Create task' button is clicked. Below, we will create varaible for the title and description before appending a new note to the 'Active' section containing the header and description that was input by our user.
	var taskTitle = $('input[placeholder=Title]').val();
	var taskDesc = $('textarea[placeholder=Description]').val();
	    $('div.task-list#active').append('<div class="todo-task"></div>');
	    
	    $('div.todo-task').append(taskTitle).addClass('task-header');
	    $('div.todo-task').append(taskDesc).addClass('task-description');

17.	To ensure the values only append to the newest #todo section, we need to ensure that the targeted div is the last-child node. That can be done like so:
	$('div.todo-task:last-child').append(taskTitle).addClass('task-header');
    $('div.todo-task:last-child').append(taskDesc).addClass('task-description');

18.	Using the jQuery UI's date-picker we can simplifiy the date selection by ensure an appropriate ID is allocated in our HTML for the date input field:
		<input type="text" id="datepicker" placeholder="Due (dd/mm/yyyy)" />

	And then by calling the date-pick function when the date input field is selected:
	    // jQuery date-picker
	    $('input#datepicker').focus(function() {
	      $(this).datepicker({
	        changeMonth: true,//this option for allowing user to select month
	        changeYear: true //this option for allowing user to select from year range
	      });
	    });

19.	Now that the date selector is working, we need to ensure that value is added to our new #todo task in the same way the taskTitle and taskDescription were added in step 16. This time around we will reference the 'id' rather than the 'placeholder' as the placeholder value contains non-alphanumeric characters which wont work.
	var taskDate = $('input[id=datepicker]').val();
	$('div.todo-task:last-child').append(taskDate).addClass('task-due');

20.	Finally, to finish off the new task we will need to create new 'complete' and 'delete' buttons and append them to the new #todo section:
    // Create 'complete' and 'delete' buttons for the new section
    $('div.todo-task:last-child').append('<button class="task-complete">Complete</button>');
    $('div.todo-task:last-child').append('<button class="task-delete">Delete</button>');

21.	That's where we run into an issue. The create, complete and delete buttons work the first few times on our new elements, however, the more clicks that are made the more issues seem to arrise. We will need to add in some conditions to ensure the correct elements are being moved to the correct places. 

Lets start off simple by checking to ensure there is content to be loaded before creating the task so as not to create a series of void divs. In order to do this, we will add a validator to the 'Title', 'Description' and 'Due' values when 'Create task' is clicked.
	  // Validator to ensure values are not empty when creating a new task
	  if( !$('input[placeholder=Title]').val() ) { 
	    if( !$('textarea[placeholder=Description]').val() ) { 
	      if( !$('input[id=datepicker]').val() ) { 
	        alert('All values are empty');    
	      } else {
	      alert('Name & Description are epmty');    
	      }  
	    } else {
	    alert('Name is empty');    
	    }
	  } else {
	    if( !$('textarea[placeholder=Description]').val() ) { 
	      if( !$('input[id=datepicker]').val() ) { 
	        alert('Description and Date are empty');    
	      } else {
	      alert('Description is empty'); 
	      } 
	    } else {
	      // Create new #todo section
	      $('div.task-list#active').append('<div class="todo-task"></div>');
	      // Append new values to the section
	      $('div.todo-task:last-child').append(taskTitle).addClass('task-header');
	      $('div.todo-task:last-child').append(taskDesc).addClass('task-description');
	      $('div.todo-task:last-child').append(taskDate).addClass('task-due');       
	      // Create 'complete' and 'delete' buttons for the new section
	      $('div.todo-task:last-child').append('<button class="task-complete">Complete</button>');
	      $('div.todo-task:last-child').append('<button class="task-delete">Delete</button>');
	    }
	  }

22.	Now that the 'Create task' function appears to be working correctly and our tasks can be moved around from section with the click of a button, we need to ensure the those 'New task' values are cleared upon creation and ready for the next task. It's as simple using jQuery's .reset() function:
	// Clear 'New task' values once they have been created
  	$("#todo-form")[0].reset();

23. Now to iron out a few glitches with the code we have so far. First, when you select the date field the datepicker doesn't immediately appear on the first click. It happens on the second click. This is an easy fix by simply switching the event from .click(function(){}) to .mouseover('focus', function(){}) - note here that the 'focus' isn't necessary to make this event work with the mouse but it will ensure that it works with the tab function on your keyboard.
  	// Select date using jQuery date-picker
  	$('input#datepicker').mouseover('focus', function() { 

24. You'll notice now, that when you create a new task it appears in the correct place and when you 'Complete' the task it also moves to the correct place. However, there's a glitch on 'Uncomplete'. The button text and div styles change correctly but it takes 2 clicks for the div to move back to it's correct position. This is because the function button.task-uncomplete is nested within button.task-complete which means it has to run through twice to be able to compile all the steps. By updating the function call with a second .prev(), we can ensure it is moved appropriately on the first click:
	$(this).parent().parent().prev().prev().append(active);

25. The next thing that you'll notice is that when trying to move the element back into the 'Complete' position, it again finds itself in the previous div. By inspecting the element, you can clearly see that the correct class has been allocated once again so here is where we are going to need to implement another conditional statement to ensure our div moves only between 'Active' and 'Complete'. Here is a check to ensure that button.task-uncomplete only moves the div from the 'complete' section - this condition will go inside the button.task-uncomplete click(function() {}):
	if ( $(this).parents("#completed").length == 1 ) { 

	}

26. Now that that issue is solved, there is a new issue where the re-activated task can no longer be assigned to 'complete'. To solve this issue I am going to rewrite the entire function using the condition brought in in the previous step. The condition is that this element is either in the #active div or it is not. Not only have I now got a correctly working piece of jQuery, I've also optimised my code.
    // Click complete/uncomplete task
    $('button.task-complete').click(function() {
      var myTask = $(this).parent();
      if ( $(this).parents("#active").length == 1 ) { 
        $(this).parent().parent().next().append(myTask);
        $(this).parent().addClass('complete');
        $(this).html("Uncomplete");
      } else {
        $(this).parent().parent().prev().append(myTask);
        $(this).parent().removeClass('complete');
        $(this).html("Complete");
      }
    });

27. Now to ptimise, annotate and clean up the code. First, the append functionality on newly created tasks can be optimised as follows instead of having essentially 5 lines of similar code as we did before: 
	$('div.todo-task:last-child').append(
      taskTitle + '<br>' + taskDesc + '<br>' + taskDate + 
      '<br><button class="task-complete">Complete</button>' + 
      '<button class="task-delete">Delete</button>' 
    );

28.	The other piece of code that can likely be optimised the conditional statement which validated that the form has been filled in correctly on task creation.
	  //Validator to ensure values are not empty when creating a new task
      if( !taskTitle ) {         
        if( !taskDesc ) { 
          if( !taskDate ) { 
            alert('All values are empty');    
          } else {
          alert('Name & Description are epmty');    
          }  
        } else {
        alert('Name is empty');    
        }
      } else {
        if( !taskDesc ) { 
          if( !taskDate ) { 
            alert('Description and Date are empty');    
          } else {
          alert('Description is empty'); 
          } 
        } else {
          // Create new #todo section
          $('div.task-list#active').append('<div class="todo-task"></div>');
          // Append new values to the section
          $('div.todo-task:last-child').append(
              taskTitle + '<br>' + taskDesc + '<br>' + taskDate + 
              '<br><button class="task-complete">Complete</button>' + 
              '<button class="task-delete">Delete</button>' 
            );
        }
      }

29. The todoTask variables can be stored in a single array and then called later on in the program to return all values just once. The following two block show how this code has been condensed.


30. Finally, to make the whole thing a little more aesthetically pleasing, I'll add some styling (which will likely result a slight restructure).
	


35. And finally, update the Header value in the html
	<h1>jQuery #TODO</h1>


31.	To make this small application useable, I'm going to save the data to the browser so it will be there next time I load the page.





